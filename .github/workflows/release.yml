name: Release Binaries

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on version tags like v0.1.0

permissions: # Needed to create a release and upload assets
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build_binaries:
    name: Build Binaries for ${{ matrix.os }} (${{ matrix.target }})
    needs: create_release # Ensure release is created before building
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name_suffix: ""
            asset_name_suffix: "-linux-amd64"
          - os: macos-latest # You might need macos-13 for older compatibility or macos-14
            target: x86_64-apple-darwin
            binary_name_suffix: ""
            asset_name_suffix: "-macos-amd64"
          - os: macos-latest # For Apple Silicon (M1/M2/M3)
            target: aarch64-apple-darwin
            binary_name_suffix: ""
            asset_name_suffix: "-macos-arm64"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name_suffix: ".exe"
            asset_name_suffix: "-windows-amd64.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: "" # Add any specific RUSTFLAGS if needed, e.g., for static linking on Linux

      # This step assumes your binary is named 'voronoi-rust' as per your Cargo.toml
      # If it's different, or if you have multiple binaries, adjust accordingly.
      - name: Prepare artifact
        # For Linux/macOS, the binary is in target/<target>/release/
        # For Windows, it's target\<target>\release\
        # The exact path depends on the target triple.
        run: |
          mkdir staging
          cp target/${{ matrix.target }}/release/voronoi-rust${{ matrix.binary_name_suffix }} staging/voronoi-rust${{ matrix.asset_name_suffix }}
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: voronoi-rust-${{ matrix.target }}
          path: staging/voronoi-rust${{ matrix.asset_name_suffix }}

  upload_assets:
    name: Upload Release Assets
    needs: build_binaries # Run after all binaries are built
    runs-on: ubuntu-latest
    strategy:
      matrix: # Corresponds to the 'include' matrix in 'build_binaries'
        include:
          - target: x86_64-unknown-linux-gnu
            asset_name_suffix: "-linux-amd64"
          - target: x86_64-apple-darwin
            asset_name_suffix: "-macos-amd64"
          - target: aarch64-apple-darwin
            asset_name_suffix: "-macos-arm64"
          - target: x86_64-pc-windows-msvc
            asset_name_suffix: "-windows-amd64.exe"
          # - target: i686-pc-windows-msvc
          #   asset_name_suffix: "-windows-x86.exe"
    steps:
      - name: Download artifact for ${{ matrix.target }}
        uses: actions/download-artifact@v4
        with:
          name: voronoi-rust-${{ matrix.target }}
          path: artifacts/${{ matrix.target }}

      - name: Upload Release Asset (${{ matrix.asset_name_suffix }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.target }}/voronoi-rust${{ matrix.asset_name_suffix }}
          asset_name: voronoi-rust${{ matrix.asset_name_suffix }}
          asset_content_type: application/octet-stream