name: Release Binaries

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on version tags like v0.1.0

permissions:
  contents: write # Required for creating releases and uploading assets

jobs:
  build_binaries:
    name: Build Binaries for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name_suffix: ""
            asset_name_package: voronoi-rust-linux-amd64
            asset_filename: voronoi-rust-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name_suffix: ""
            asset_name_package: voronoi-rust-macos-amd64
            asset_filename: voronoi-rust-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name_suffix: ""
            asset_name_package: voronoi-rust-macos-arm64
            asset_filename: voronoi-rust-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name_suffix: ".exe"
            asset_name_package: voronoi-rust-windows-amd64.exe
            asset_filename: voronoi-rust-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: "" # Add specific RUSTFLAGS if needed

      - name: Prepare artifact for upload
        run: |
          mkdir staging
          cp target/${{ matrix.target }}/release/voronoi-rust${{ matrix.binary_name_suffix }} staging/${{ matrix.asset_filename }}
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_filename }} # Artifact name will be e.g., voronoi-rust-linux-amd64
          path: staging/${{ matrix.asset_filename }} # Path to the specific file

  release_assets:
    name: Create GitHub Release and Upload Assets
    needs: build_binaries # Ensure this job runs only after all binaries are built
    runs-on: ubuntu-latest
    permissions:
      contents: write # Already defined at workflow level, but good to be explicit if needed elsewhere
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # This downloads all artifacts into the 'artifacts' directory
                          # Each artifact (which is a single file in this setup) will be in its own subdirectory
                          # e.g., artifacts/voronoi-rust-linux-amd64/voronoi-rust-linux-amd64

      - name: List downloaded files (for debugging)
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1 # Updated action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          # body: "Released ${{ github.ref_name }}" # Optional: Custom release body
          # body_path: "CHANGELOG.md" # Optional: Path to a file with release notes
          files: | # List of files to upload. These paths are relative to the runner's workspace root.
            artifacts/voronoi-rust-linux-amd64/voronoi-rust-linux-amd64
            artifacts/voronoi-rust-macos-amd64/voronoi-rust-macos-amd64
            artifacts/voronoi-rust-macos-arm64/voronoi-rust-macos-arm64
            artifacts/voronoi-rust-windows-amd64.exe/voronoi-rust-windows-amd64.exe
          fail_on_unmatched_files: true # Recommended: fail if any listed files are not found